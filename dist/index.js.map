{"version":3,"sources":["../src/index.js"],"names":["EQUALS","EQ","GREATER","GT","GREATER_OR_EQUALS","GTE","LESS","LT","LESS_OR_EQUALS","LTE","NOT_EQUALS","NE","Consts","SQLObject","cloned","Object","create","getPrototypeOf","descriptors","getOwnPropertyDescriptors","propName","descriptor","hasOwnProperty","propValue","value","Array","isArray","slice","assign","clone","defineProperty","Conditions","args","arg","push","length","Disjunction","map","join","Conjunction","s","toString","Condition","column","operator","quoteTerm","quoteVal","Negation","InclusionOperator","inclusionType","val","In","NotIn","GlobalNotIn","GlobalIn","Settings","dict","key","keys","Operators","createCondition","Error","commonReplacer","Value","replace","Term","term","parts","split","Number","isFinite","SQLFunction","name","_curry_f","AggregateFunctions","count","any","anyLast","min","max","sum","avg","uniq","uniqCombined","uniqHLL12","uniqExact","groupArray","groupUniqArray","ArithmeticFunctions","plus","minus","multiply","divide","intDiv","intDivOrZero","modulo","negate","abs","TimeFunctions","toYear","toMonth","toDayOfMonth","toDayOfWeek","toHour","toMinute","toTime","toDate","toDateTime","toDateTime64","toStartOfDay","toStartOfMonth","toStartOfQuarter","toStartOfYear","toStartOfMinute","toStartOfFiveMinute","toStartOfHour","now","today","yesterday","IPAddrFunctions","toIPv4","toIPv6","IPv4NumToString","IPv4StringToNum","IPv4NumToStringClassC","IPv6NumToString","IPv6StringToNum","Raw","string","raw","Query","Select","tables","conditions","having_conditions","preconditions","aggregations","aggregationsModifier","undefined","select_list","order_expressions","request_totals","sampling","limits","limitbycolumns","fmt","settings_dict","columns","forEach","col","table","alias","values","condition","aggregateExpressions","a","modifier","number","offset","limit","expressions","e","c","from","prewhere","where","groupby","having","order_by","with_totals","sample","limitby","format","toUpperCase","settings","filter","v","Queries","Utility","Shortcuts","And","Or","Eq","Ne","Gte","Lte","Lt","Gt","notIn","cast","thing","t","Dialect"],"mappings":"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","sourcesContent":["const EQUALS = \"=\";\nconst EQ = EQUALS;\nconst GREATER = \">\";\nconst GT = GREATER;\nconst GREATER_OR_EQUALS = \">=\";\nconst GTE = GREATER_OR_EQUALS;\nconst LESS = \"<\";\nconst LT = LESS;\nconst LESS_OR_EQUALS = \"<=\";\nconst LTE = LESS_OR_EQUALS;\nconst NOT_EQUALS = \"!=\";\nconst NE = NOT_EQUALS;\n\nconst Consts = {\n  EQUALS,\n  GREATER,\n  GREATER_OR_EQUALS,\n  LESS,\n  LESS_OR_EQUALS,\n  NOT_EQUALS,\n  EQ,\n  GT,\n  GTE,\n  LT,\n  LTE,\n  NE,\n};\n\nclass SQLObject {\n  clone() {\n    const cloned = Object.create(Object.getPrototypeOf(this));\n    const descriptors = Object.getOwnPropertyDescriptors(this);\n\n    for (const propName in descriptors) {\n      const descriptor = descriptors[propName];\n\n      if (\n        descriptor.hasOwnProperty(\"value\") &&\n        !descriptor.hasOwnProperty(\"get\") &&\n        !descriptor.hasOwnProperty(\"set\")\n      ) {\n        const propValue = descriptor.value;\n\n        if (Array.isArray(propValue)) {\n          descriptor.value = propValue.slice();\n        } else if (\n          !(propValue instanceof SQLObject) &&\n          typeof propValue === \"object\" &&\n          propValue !== null\n        ) {\n          descriptor.value = Object.assign({}, propValue);\n        } else if (propValue instanceof SQLObject) {\n          descriptor.value = propValue.clone();\n        } else {\n          descriptor.value = propValue;\n        }\n\n        Object.defineProperty(cloned, propName, descriptor);\n      }\n    }\n\n    return cloned;\n  }\n}\n\nclass Conditions extends SQLObject {\n  constructor(...args) {\n    super();\n    this.args = args;\n  }\n\n  push(arg) {\n    this.args.push(arg);\n  }\n\n  get length() {\n    return this.args.length;\n  }\n}\n\nclass Disjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    return this.args.length\n      ? this.args.map((arg) => \"(\" + arg + \")\").join(\" or \")\n      : \"\";\n  }\n}\n\nclass Conjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    if (!this.args.length) return \"\";\n\n    return this.args\n      .map((arg) => {\n        const s = arg.toString ? arg.toString() : arg;\n        return \"(\" + s + \")\";\n      })\n      .join(\" and \");\n  }\n}\n\nclass Condition extends SQLObject {\n  constructor(column, operator, value) {\n    super();\n    this.column = quoteTerm(column);\n    this.operator = operator;\n    this.value = value instanceof SQLObject ? value : quoteVal(value);\n  }\n\n  toString() {\n    if (this.operator) {\n      return [this.column, this.operator, this.value].join(\" \");\n    } else {\n      return this.column;\n    }\n  }\n}\n\nclass Negation extends Condition {\n  constructor(column, operator, value) {\n    super(column, operator, value);\n  }\n\n  toString() {\n    return \"not(\" + super.toString() + \")\";\n  }\n}\n\nclass InclusionOperator extends Condition {\n  constructor(inclusionType, column, operator, value) {\n    super(column, operator, value);\n    this.operator = inclusionType;\n  }\n\n  toString() {\n    return [\n      quoteTerm(this.column),\n      \" \",\n      this.operator,\n      \" (\",\n      Array.isArray(this.value)\n        ? this.value.map((val) => quoteVal(val)).join(\",\")\n        : this.value,\n      \")\",\n    ].join(\"\");\n  }\n}\n\nclass In extends InclusionOperator {\n  constructor(...args) {\n    super(\"in\", ...args);\n  }\n}\n\nclass NotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"not in\", ...args);\n  }\n}\n\nclass GlobalNotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global not in\", ...args);\n  }\n}\n\nclass GlobalIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global in\", ...args);\n  }\n}\n\nclass Settings extends SQLObject {\n  constructor(dict = {}) {\n    super();\n\n    this.dict = {};\n    for (const key in dict) {\n      if (dict.hasOwnProperty(key)) {\n        this.dict[key] = quoteTerm(dict[key]);\n      }\n    }\n  }\n\n  toString() {\n    return Object.keys(this.dict)\n      .map((key) => key + \"=\" + this.dict[key])\n      .join();\n  }\n}\n\nconst Operators = {\n  Conjunction,\n  Disjunction,\n  Negation,\n  In,\n  NotIn,\n  GlobalIn,\n  GlobalNotIn,\n};\n\nfunction createCondition(...args) {\n  switch (args.length) {\n    case 1:\n      return args[0] instanceof Condition ? args[0] : new Condition(args[0]);\n    case 2:\n      return new Condition(args[0], EQUALS, args[1]);\n    case 3:\n      return new Condition(...args);\n    default:\n      throw new Error(\"Invalid condition args: \", args);\n  }\n}\n\nlet commonReplacer = [\n  /[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g,\n  (s) => {\n    switch (s) {\n      case \"\\0\":\n        return \"\\\\0\";\n      case \"\\n\":\n        return \"\\\\n\";\n      case \"\\b\":\n        return \"\\\\b\";\n      case \"\\r\":\n        return \"\\\\r\";\n      case \"\\t\":\n        return \"\\\\t\";\n      case \"\\\\\":\n        return \"\\\\\\\\\";\n      case \"\\x1a\":\n        return \"\\\\Z\";\n    }\n  },\n];\n\nclass Value extends SQLObject {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  toString() {\n    if (typeof this.value === \"string\") {\n      return (\n        \"'\" + this.value.replace(...commonReplacer).replace(/'/g, \"''\") + \"'\"\n      );\n    }\n    if (typeof this.value === \"undefined\") {\n      return \"''\";\n    }\n\n    if (Array.isArray(this.value)) {\n      return this.value.map((val) => new Value(val)).join();\n    }\n\n    return this.value + \"\";\n  }\n}\n\nclass Term extends SQLObject {\n  constructor(term) {\n    super();\n    this.term = term;\n  }\n\n  toString() {\n    const parts = this.term.split(\".\");\n    if (parts.length > 1) {\n      return [\n        new Term(parts[0]).toString(),\n        new Term(parts[1]).toString(),\n      ].join(\".\");\n    }\n\n    return (\n      \"`\" + this.term.replace(...commonReplacer).replace(/`/g, \"\\\\`\") + \"`\"\n    );\n  }\n}\n\nfunction quoteVal(value) {\n  return value instanceof SQLObject ? value : new Value(value);\n}\n\nfunction quoteTerm(term) {\n  return term instanceof SQLObject || Number.isFinite(term)\n    ? term\n    : new Term(term);\n}\n\nclass SQLFunction extends SQLObject {\n  constructor(name, ...args) {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  toString() {\n    return (\n      this.name +\n      \"(\" +\n      this.args\n        .map((arg) =>\n          arg instanceof SQLObject || Number.isFinite(arg)\n            ? arg\n            : quoteTerm(arg)\n        )\n        .join() +\n      \")\"\n    );\n  }\n}\n\nconst _curry_f = (name) => {\n  return (...args) => new SQLFunction(name, ...args);\n};\n\nconst AggregateFunctions = {\n  count: _curry_f(\"count\"),\n  any: _curry_f(\"any\"),\n  anyLast: _curry_f(\"anyLast\"),\n  min: _curry_f(\"min\"),\n  max: _curry_f(\"max\"),\n  sum: _curry_f(\"sum\"),\n  avg: _curry_f(\"avg\"),\n  uniq: _curry_f(\"uniq\"),\n  uniqCombined: _curry_f(\"uniqCombined\"),\n  uniqHLL12: _curry_f(\"uniqHLL12\"),\n  uniqExact: _curry_f(\"uniqExact\"),\n  groupArray: _curry_f(\"groupArray\"),\n  groupUniqArray: _curry_f(\"groupUniqArray\"),\n};\n\nconst ArithmeticFunctions = {\n  plus: _curry_f(\"plus\"),\n  minus: _curry_f(\"minus\"),\n  multiply: _curry_f(\"multiply\"),\n  divide: _curry_f(\"divide\"),\n  intDiv: _curry_f(\"intDiv\"),\n  intDivOrZero: _curry_f(\"intDivOrZero\"),\n  modulo: _curry_f(\"modulo\"),\n  negate: _curry_f(\"negate\"),\n  abs: _curry_f(\"abs\"),\n};\n\nconst TimeFunctions = {\n  toYear: _curry_f(\"toYear\"),\n  toMonth: _curry_f(\"toMonth\"),\n  toDayOfMonth: _curry_f(\"toDayOfMonth\"),\n  toDayOfWeek: _curry_f(\"toDayOfWeek\"),\n  toHour: _curry_f(\"toHour\"),\n  toMinute: _curry_f(\"toMinute\"),\n  toTime: _curry_f(\"toTime\"),\n  toDate: _curry_f(\"toDate\"),\n  toDateTime: _curry_f(\"toDateTime\"),\n  toDateTime64: _curry_f(\"toDateTime64\"),\n  toStartOfDay: _curry_f(\"toStartOfDay\"),\n  toStartOfMonth: _curry_f(\"toStartOfMonth\"),\n  toStartOfQuarter: _curry_f(\"toStartOfQuarter\"),\n  toStartOfYear: _curry_f(\"toStartOfYear\"),\n  toStartOfMinute: _curry_f(\"toStartOfMinute\"),\n  toStartOfFiveMinute: _curry_f(\"toStartOfFiveMinute\"),\n  toStartOfHour: _curry_f(\"toStartOfHour\"),\n\n  now: _curry_f(\"now\"),\n  today: _curry_f(\"today\"),\n  yesterday: _curry_f(\"yesterday\"),\n};\n\nconst IPAddrFunctions = {\n  toIPv4: _curry_f(\"toIPv4\"),\n  toIPv6: _curry_f(\"toIPv6\"),\n  IPv4NumToString: _curry_f(\"IPv4NumToString\"),\n  IPv4StringToNum: _curry_f(\"IPv4StringToNum\"),\n  IPv4NumToStringClassC: _curry_f(\"IPv4NumToStringClassC\"),\n  IPv6NumToString: _curry_f(\"IPv6NumToString\"),\n  IPv6StringToNum: _curry_f(\"IPv6StringToNum\"),\n};\n\nclass Raw extends SQLObject {\n  constructor(string) {\n    super();\n    this.raw = string;\n  }\n\n  toString() {\n    return this.raw;\n  }\n}\n\nclass Query extends SQLObject {\n}\n\nclass Select extends Query {\n  constructor() {\n    super();\n\n    this.tables = [];\n    this.conditions = new Conjunction();\n    this.having_conditions = new Conjunction();\n    this.preconditions = new Conjunction();\n    this.aggregations = [];\n    this.aggregationsModifier = undefined;\n    this.select_list = [];\n    this.order_expressions = [];\n    this.request_totals = undefined;\n    this.sampling = undefined;\n    this.limits = undefined;\n    this.limitbycolumns = undefined;\n    this.fmt = undefined;\n    this.settings_dict = undefined;\n  }\n\n  select(...columns) {\n    if (columns.length === 0) {\n      return this.select_list;\n    }\n\n    columns.forEach((col) => this.select_list.push(col));\n    return this;\n  }\n\n  /**\n   * @usage\n   *  q = selectBuilder->from('table0', ['table1', 'alias1'], { 'table2' : 'alias2'})->toString()\n   *  assertEquals(q, \"select * from table0, table1 as alias1, table2 as alias2\");\n   *\n   * @param tables\n   * @return {Select|Array}\n   */\n  from(...tables) {\n    if (!tables.length) {\n      return this.tables;\n    }\n\n    tables = tables.map((table) => {\n      if (typeof table === \"string\") return [quoteTerm(table)];\n      if (Array.isArray(table)) {\n        if (table[0] instanceof Select)\n          table[0] = \"(\" + table[0].toString() + \")\";\n        else table[0] = quoteTerm(table[0]);\n        table[1] = quoteTerm(table[1]);\n        return table;\n      }\n      if (table instanceof Select) return [\"(\" + table.toString() + \")\"];\n\n      let alias = Object.values(table)[0];\n      if (alias instanceof Select) alias = \"(\" + alias.toString() + \")\";\n      else alias = quoteTerm(alias);\n\n      return [alias, quoteTerm(Object.keys(table)[0])];\n    });\n\n    this.tables = tables;\n    return this;\n  }\n\n  prewhere(...args) {\n    this.preconditions.push(createCondition(...args));\n    return this;\n  }\n\n  orPrewhere(...args) {\n    let condition = createCondition(...args);\n    if (this.preconditions.length) {\n      this.preconditions = new Disjunction(this.preconditions, condition);\n    } else {\n      this.preconditions.push(condition);\n    }\n\n    return this;\n  }\n\n  where(...args) {\n    if (args.length === 1 && args[0] instanceof Condition) {\n      this.conditions.push(args[0]);\n    } else {\n      this.conditions.push(createCondition(...args));\n    }\n    return this;\n  }\n\n  orWhere(...args) {\n    let condition = createCondition(...args);\n    if (this.conditions.length) {\n      this.conditions = new Disjunction(this.conditions, condition);\n    } else {\n      this.conditions.push(condition);\n    }\n\n    return this;\n  }\n\n  groupBy(...aggregateExpressions) {\n    aggregateExpressions.forEach((a) => this.aggregations.push(a));\n    return this;\n  }\n\n  groupByModifier(modifier) {\n    switch (modifier) {\n      case \"rollup\":\n        this.aggregationsModifier = \"with rollup\";\n        break;\n      case \"cube\":\n        this.aggregationsModifier = \"with cube\";\n        break;\n      case \"total\":\n        this.aggregationsModifier = \"with total\";\n        break;\n      case null:\n        this.aggregationsModifier = null;\n        break;\n    }\n    return this;\n  }\n\n  withTotals(request_totals = true) {\n    this.request_totals = request_totals;\n    return this;\n  }\n\n  limit(number, offset) {\n    this.limits = {\n      number,\n      offset,\n    };\n    return this;\n  }\n\n  limitBy(limit, ...columns) {\n    this.limitbycolumns = {\n      limit,\n      columns,\n    };\n    return this;\n  }\n\n  orderBy(...expressions) {\n    expressions.forEach((e) => this.order_expressions.push(e));\n    return this;\n  }\n\n  format(fmt) {\n    this.fmt = fmt;\n    return this;\n  }\n\n  toString() {\n    let select_list;\n    if (this.select_list.length === 0) {\n      select_list = \"*\";\n    } else {\n      select_list = this.select_list\n        .map((c) =>\n          Array.isArray(c)\n            ? quoteTerm(c[0]) + \" as \" + quoteTerm(c[1])\n            : quoteTerm(c)\n        )\n        .join();\n    }\n\n    let from = this.from().map((table) =>\n      table.length === 1 ? table[0] : table[0] + \" as \" + table[1]\n    );\n    from = from.length ? \"from \" + from.join() : \"\";\n\n    let prewhere = this.preconditions.length\n      ? \"prewhere \" + this.preconditions\n      : \"\";\n    let where = this.conditions.length ? \"where \" + this.conditions : \"\";\n\n    let groupby = this.aggregations.length\n      ? \"group by \" +\n        this.aggregations.map((c) => quoteTerm(c)).join() +\n        (this.aggregationsModifier ? \" \" + this.aggregationsModifier : \"\")\n      : \"\";\n\n    let having = this.having_conditions.length\n      ? \"having \" + this.having_conditions\n      : \"\";\n\n    let order_by = this.order_expressions.length\n      ? \"order by \" +\n        this.order_expressions\n          .map((e) =>\n            Array.isArray(e) ? quoteTerm(e[0]) + \" \" + e[1] : quoteTerm(e)\n          )\n          .join()\n      : \"\";\n\n    let with_totals = this.request_totals ? \"with totals\" : \"\";\n    let sample = this.sampling ? \"sample \" + this.sampling : \"\";\n\n    let limitby =\n      this.limitbycolumns && this.limitbycolumns.columns.length\n        ? \"limit \" +\n          this.limitbycolumns.limit +\n          \" by \" +\n          this.limitbycolumns.columns.map((c) => quoteTerm(c)).join()\n        : \"\";\n\n    let limit = this.limits\n      ? \"limit \" +\n        this.limits.number +\n        (typeof this.limits.offset === \"undefined\"\n          ? \"\"\n          : \",\" + this.limits.offset)\n      : \"\";\n\n    let format = this.fmt ? \"format \" + this.fmt.toUpperCase() : \"\";\n\n    let settings = this.settings_dict ? \"settings \" + this.settings_dict : \"\";\n\n    const parts = [\n      \"select\",\n      select_list,\n      from,\n      sample,\n      prewhere,\n      where,\n      groupby,\n      with_totals,\n      having,\n      order_by,\n      limitby,\n      limit,\n      format,\n      settings,\n    ].filter((v) => v != \"\");\n\n    return parts.join(\" \");\n  }\n\n  settings(dict) {\n    this.settings_dict = new Settings(dict);\n    return this;\n  }\n}\n\nconst Queries = {\n  Select,\n};\n\nconst Utility = {\n  quoteVal,\n  val: quoteVal,\n  quoteTerm,\n  term: quoteTerm,\n  raw: (s) => new Raw(s),\n  Condition: (...args) => new Condition(...args),\n};\n\nconst Shortcuts = {\n  And: (...args) => new Conjunction(...args),\n  Or: (...args) => new Disjunction(...args),\n  Eq: (col, val) => new Condition(col, Consts.EQ, val),\n  Ne: (col, val) => new Condition(col, Consts.NE, val),\n  Gte: (col, val) => new Condition(col, Consts.GTE, val),\n  Lte: (col, val) => new Condition(col, Consts.LTE, val),\n  Lt: (col, val) => new Condition(col, Consts.LT, val),\n  Gt: (col, val) => new Conjunction(col, Consts.GT, val),\n  in: (col, values) => new In(col, null, values),\n  notIn: (col, values) => new NotIn(col, null, values),\n  cast: (thing, t) => new SQLFunction(\"cast\", thing, quoteVal(t)),\n};\n\nconst Dialect = {\n  ...Operators,\n  ...AggregateFunctions,\n  ...ArithmeticFunctions,\n  ...TimeFunctions,\n  ...IPAddrFunctions,\n  ...Consts,\n  ...Queries,\n  ...Utility,\n  ...Shortcuts,\n};\nexport default Dialect;\n"],"file":"index.js"}